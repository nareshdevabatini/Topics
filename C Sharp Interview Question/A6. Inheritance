Inheritance:
          It allows the creation of hierarchical classifications. Using inheritance you can create a general class that defines 
          traits common to a set of related items
          
          In c#, a class that get inherited class Base class and class get inheriting called Derived class. These derived class is 
          specialized version of base class. Derived class inherits all of variable , properties, indexers, methods from base class.
          
example:
using System;
using System.ComponentModel;
using System.Threading.Tasks;

class Program
    {
        
        static void Main(string[] args)
        {
            B a = new B();
            a.FirstName = "N";
            a.LastName = "A";
            a.PrintName();
            B d = new B();
            Console.ReadLine();
        }
    }
    public class A
    {
        static A()
        {
            Console.WriteLine("A Static Custroctor");
        }
        public A()
        {
            Console.WriteLine("A Custroctor");
        }
        public A(string Age)
        {
            Console.WriteLine("A Custroctor with Age");
        }
        public string LastName;
        public string FirstName;
        public void PrintName() {
            Console.WriteLine("Name: " + LastName + FirstName);
        }
    }
    public class B:A
    {
        public B()
        {
            Console.WriteLine("B Constructor");
        }
        static B()
        {
            Console.WriteLine("B Static Custroctor");
        }
        public void PrintName()
        {
            base.PrintName();
            //Console.WriteLine("Name: " + LastName + FirstName + " Age");
        }
    }
Ans:
B Static Custroctor
A Static Custroctor
A Custroctor
B Constructor
Name: AN
A Custroctor
B Constructor

What if cases to the questions:
--------------------------------

What if => Can we have Parmeter constructor in base class and not having parmeter constructor in Derived Class? (No) we should have constructor and use base as parameter constructor.
Can we call static constructor multiple times? No it's should call only once because it's intiliaze before creating instance of the class.
         

Why not the other alternatives:
--------------------------------

There is no alternatives

Need for that concept:
-----------------------
Code Reusability

Other notable points:
----------------------



Realtime application of that concept in our project codes:
-----------------------------------------------------------
Property Inhertance
public class Person{
public string LastName;
public string FirstName;
}
public class Employee:Person{
public string Type;
}

Method Inheritance
public sealed class AuthorizeUserAttribute : AuthorizeAttribute
    {
        public override void OnAuthorization(HttpActionContext actionContext)
        {
            return true or false
         }
     
    }
