Collections allow the user to create a group of objects which can dynamically grow or shrink as per the need.

1. Non - generic Collections - Values can be of any type. Ex. ArrayList, Hashtable

ArrayList: 
The ArrayList is a non-generic collection of objects whose size increases dynamically. It is the same as Array except that its size increases dynamically
ArrayList arlist = new ArrayList(); 

Ex: 
var arlist1 = new ArrayList();
arlist1.Add(1);
arlist1.Add("Bill");
arlist1.Add(" ");
arlist1.Add(true);
arlist1.Add(4.5);
arlist1.Add(null);

Hashtable:

Ex: 
// Hashtable
using System.Collections;
Hashtable numberNames = new Hashtable();
numberNames.Add(1, "One"); //adding a key/value using the Add() method
numberNames.Add(2, 3333);
numberNames.Add("three", "Three");

foreach(DictionaryEntry item in numberNames)
{
    Console.WriteLine(item.Key + " " + item.Value);
}

//Output: three Three
//2 3333
//1 One

2. Generic Collections - Value must be defeined a specific type <T>. Ex. List<T>, Dictionary<TK, TV>, SortedList<TK, TV>

List<T>:

List<T> is a collection class which can hold a set of values or set of objects as per strongly typed or weakly typed.

Ex:

var skills = new List<string>();
skills.Add("C# .Net");
skills.Add("Java");
skills.Add("Python");


IList or IList<T>:

1. IList<T> is a interface which is implemented by List<T>, Collection<T>, Array, ArrayList
2. Since IList is a base interface for all the above collection classes, we can directly assign those values into the IList variable or arguement.

Ex: IList<string> carBrands = new List<string>();


Dictionary<TK, TV>:

1. Represents a collection of keys and values.
2. In Dictionary, key must be unique. Duplicate keys are not allowed if you try to use duplicate key then compiler will throw an exception.

Ex.

// Dictionary Implementation
Dictionary<int, string> employees =
    new Dictionary<int, string>();

employees.Add(1, "Naresh");
employees.Add(2, "Manoj");
employees.Add(3, "Hari");

foreach (KeyValuePair<int, string> emp in employees)
{
    Console.WriteLine("Emp Id: " + emp.Key + " Emp Name: " + emp.Value);
}

Console.WriteLine(employees[2]); // Fetches the Value

// Output:
//Emp Id: 1 Emp Name: Naresh
//Emp Id: 2 Emp Name: Manoj
//Emp Id: 3 Emp Name: Hari
//Naresh

Sorted List & Sorted Dictionary
