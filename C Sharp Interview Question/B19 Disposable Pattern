// See https://aka.ms/new-console-template for more information

using (ComplexCleanupBase emp = new ComplexCleanupBase())
{

};
//Employee emp = new Employee();
//emp = null;
GC.Collect();
Console.ReadLine();

public class Employee
{
    static IEnumerable<int> GetSequence()
    { // Yield a sequence of integers from 1 to 5
      
        yield return 1; yield return 2; yield return 3; yield return 4; yield return 5; 
    }
}
public class ComplexCleanupBase : IDisposable
{
    // some fields that require cleanup
    private bool disposed = false; // to detect redundant calls

    public ComplexCleanupBase()
    {
        // allocate resources
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                // dispose-only, i.e. non-finalizable logic
            }

            // shared cleanup logic
            disposed = true;
        }
    }

    ~ComplexCleanupBase()
    {
        Console.WriteLine("Destructor");
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
}
